syntax = "proto3";

package containers_ai.alameda.v1alpha1.datahub;

import "google/rpc/status.proto";
import "google/protobuf/empty.proto";
import "alameda_api/v1alpha1/datahub/metadata.proto";
import "alameda_api/v1alpha1/datahub/predict.proto";
import "alameda_api/v1alpha1/datahub/metric.proto";
import "alameda_api/v1alpha1/datahub/resource.proto";
import "alameda_api/v1alpha1/datahub/recommendation.proto";

message ListAlamedaPodResourceInfoRequest {
    NamespacedName alameda_resource = 1;
}

message ListPodMetricsRequest {
    NamespacedName namespaced_name = 1;
    TimeRange time_range = 2;
}

message ListPodMetricsResponse {
    google.rpc.Status status = 1;
    repeated PodMetric pod_metrics = 2;
}

message ListNodeMetricsRequest {
    repeated string node_names = 1;
    TimeRange time_range = 2;
}

message ListNodeMetricsResponse {
    google.rpc.Status status = 1;
    repeated NodeMetric node_metrics = 2;
}

message ListPodsResponse {
    google.rpc.Status status = 1;
    repeated Pod pods = 2;
}

message ListNodesResponse {
    google.rpc.Status status = 1;
    repeated Node nodes = 2;
}

message ListPodPredictionRequest {
    NamespacedName namespaced_name = 1;
    TimeRange time_range = 2;
}

message ListPodPredictionResponse {
    google.rpc.Status status = 1;
    repeated PodPrediction pod_predictions = 2;
}

message ListNodePredictionRequest {
    repeated string node_name = 1;
    TimeRange time_range = 2;
}

message ListNodePredictionResponse {
    google.rpc.Status status = 1;
    repeated NodePrediction node_predictions = 2;
}

message ListPodRecommendationRequest {
    NamespacedName namespaced_name = 1;
    TimeRange time_range = 2;
}

message ListPodRecommendationResponse {
    google.rpc.Status status = 1;
    repeated PodRecommendation pod_recommendations = 2;
}

message ListPodsByNodeNameRequest {
    repeated string node_name = 1;
}

message CreatePodPredictionRequest {
    repeated PodPrediction pod_predictions = 1;
}

message CreateNodePredictionRequest {
    repeated NodePrediction node_predictions = 1;
}

message CreatePodRecommendationRequest {
    repeated PodRecommendation pod_recommendations = 1;
}

message CreateAlamedaPodRequest {
    RecommendationPolicy policy = 1;
    repeated Pod alameda_pods = 2;
}

message CreateAlamedaNodeRequest {
    repeated Node alameda_nodes = 1;
}

message DeleteAlamedaPodRequest {
    repeated Pod alameda_pods = 1;
}

message DeleteAlamedaNodeRequest {
    repeated Node alameda_nodes = 1;
}

service DatahubService {
    rpc ListAlamedaPodResourceInfo(ListAlamedaPodResourceInfoRequest)
        returns (ListPodsResponse) {}
    rpc ListPodMetrics(ListPodMetricsRequest)
        returns (ListPodMetricsResponse) {}
    rpc ListNodeMetrics(ListNodeMetricsRequest)
        returns (ListNodeMetricsResponse) {}
    // List pods need to be predicted
    rpc ListAlamedaPods(google.protobuf.Empty)
        returns (ListPodsResponse){}
    // List nodes need to be predicted
    rpc ListAlamedaNodes(google.protobuf.Empty)
        returns (ListNodesResponse){}
    rpc ListPodPrediction(ListPodPredictionRequest)
        returns (ListPodPredictionResponse) {}
    rpc ListNodePrediction(ListNodePredictionRequest)
        returns (ListNodePredictionResponse) {}
    rpc ListPodRecommendation(ListPodRecommendationRequest)
        returns (ListPodRecommendationResponse) {}
    rpc ListPodsByNodeName(ListPodsByNodeNameRequest)
        returns (ListPodsResponse) {}        
    rpc CreateAlamedaPod(CreateAlamedaPodRequest)
        returns (google.rpc.Status){}    
    rpc CreateAlamedaNode(CreateAlamedaNodeRequest)
        returns (google.rpc.Status){}    
    rpc CreatePodPrediction(CreatePodPredictionRequest)
        returns (google.rpc.Status) {}
    rpc CreateNodePrediction(CreateNodePredictionRequest)
        returns (google.rpc.Status) {}
    rpc CreatePodRecommendation(CreatePodRecommendationRequest)
        returns (google.rpc.Status) {}    
    rpc DeleteAlamedaPod(DeleteAlamedaPodRequest)
        returns (google.rpc.Status){}        
    rpc DeleteAlamedaNode(DeleteAlamedaNodeRequest)
        returns (google.rpc.Status){}            
}