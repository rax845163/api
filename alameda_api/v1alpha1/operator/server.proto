syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/rpc/status.proto";

service OperatorService {
    rpc ListMetrics(ListMetricsRequest)
        returns (ListMetricsResponse) {}
    rpc ListMetricsSum(ListMetricsSumRequest)
        returns (ListMetricsSumResponse) {}
    rpc CreatePredictResult(CreatePredictResultRequest)
        returns (CreatePredictResultResponse) {}
    rpc GetResourceInfo(GetResourceInfoRequest)
        returns (GetResourceInfoResponse) {}
    rpc GetResourceRecommendation(GetResourceRecommendationRequest)
        returns (GetResourceRecommendationResponse) {}
}

enum MetricType {
    CONTAINER_CPU_USAGE_TOTAL = 0;
    CONTAINER_CPU_USAGE_TOTAL_RATE = 1;
    CONTAINER_MEMORY_USAGE = 2;
    NODE_CPU_USAGE_SECONDS_AVG1M = 3;
    NODE_MEMORY_USAGE_BYTES = 4;
}

enum ResourceType {
    POD = 0;
}

enum StrOp {
    EQUAL = 0;
    NOT_EQUAL = 1;
}

message TimeRange {
    google.protobuf.Timestamp start_time = 1;
    google.protobuf.Timestamp end_time = 2;
    google.protobuf.Duration step = 3;
}
    
message LabelSelector {
    string key = 1;
    StrOp op = 2 ;
    string value = 3;
}

message Sample {
    google.protobuf.Timestamp time = 1;
    double value = 2;
}

message MetricResult {
    map<string, string> labels = 1;
    repeated Sample samples = 2;
}

// Get metric with each condition do AND operation. 
message ListMetricsRequest {
    MetricType metric_type = 1;
    oneof time_selector {
        google.protobuf.Timestamp time = 2;
        google.protobuf.Duration duration = 3;
        TimeRange time_range = 4;
    }
    repeated LabelSelector conditions = 5;
}

message ListMetricsResponse {
    repeated MetricResult metrics = 1;
    google.rpc.Status status = 2;
}

// Get metrics summation by grouping labels.
message ListMetricsSumRequest {
    MetricType metric_type = 1;
    oneof time_selector {
        google.protobuf.Timestamp time = 2;
        google.protobuf.Duration duration = 3;
        TimeRange time_range = 4;
    }
    repeated LabelSelector conditions = 5;
    repeated string labels = 6;
}

message ListMetricsSumResponse {
    repeated MetricResult metrics = 1;
    google.rpc.Status status = 2;
}

message GetResourceInfoRequest {
    ResourceType type = 1;
    string namespace = 2;
    string name = 3;
}

message GetResourceRecommendationRequest {
    ResourceType type = 1;
    string namespace = 2;
    string name = 3;
}

message Resource {
    map<string,string> limit = 1;
    map<string,string> request = 2;
}

message Recommendation {
    google.protobuf.Timestamp time = 1;
    Resource resource = 2;
}

message PredictData {
    google.protobuf.Timestamp time = 1;
    string value = 2;
}

message TimeSeriesData {
    repeated PredictData predict_data = 1;
}

message PredictContainer {
    string name = 1;
    map<string, TimeSeriesData> raw_predict_data = 2;
    repeated Recommendation recommendations = 3;
    Resource initial_resource = 4;
}

message PredictPod {
    string uid = 1;
    string namespace = 2;
    string name = 3;
    repeated PredictContainer predict_containers = 4;
}

message Container {
    string name = 1;
    Resource resource = 2;
    Resource initial_resource = 3;
}

message PodInfo {
    repeated Container containers = 1;
}

message CreatePredictResultRequest {
    repeated PredictPod predict_pods = 1;
}

message CreatePredictResultResponse {
    google.rpc.Status status = 1;
}

message GetResourceInfoResponse {
    google.rpc.Status status = 1;
    ResourceType type = 2;
    string uid = 3;
    string namespace = 4;
    string name = 5;
    PodInfo pod_info = 6;
}

message GetResourceRecommendationResponse {
    google.rpc.Status status = 1;
    ResourceType type = 2;
    string uid = 3;
    string namespace = 4;
    string name = 5;
    PodInfo pod_info = 6;
}
